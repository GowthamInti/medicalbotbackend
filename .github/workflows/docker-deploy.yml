name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEFAULT_ADMIN_USERNAME=${{ secrets.DEFAULT_ADMIN_USERNAME }}
          DEFAULT_ADMIN_PASSWORD=${{ secrets.DEFAULT_ADMIN_PASSWORD }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to Production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # Add your deployment commands here
        # Examples:
        # - SSH to server and pull new image
        # - Update Kubernetes deployment
        # - Update Docker Compose on server
        # - Deploy to cloud platform (AWS, GCP, Azure)

  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run API tests
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DEFAULT_ADMIN_USERNAME: test_admin
        DEFAULT_ADMIN_PASSWORD: test_password
      run: |
        # Start the API in background for testing
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        
        # Wait for API to start
        sleep 10
        
        # Run health check
        curl -f http://localhost:8000/health || exit 1
        
        # Test admin login
        TOKEN=$(curl -s -X POST "http://localhost:8000/admin/login" \
          -H "Content-Type: application/json" \
          -d '{"username":"test_admin", "password":"test_password"}' | \
          python -c "import sys, json; print(json.load(sys.stdin)['access_token'])")
        
        # Test authenticated chat endpoint
        curl -f -X POST "http://localhost:8000/chat/" \
          -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"session_id":"test", "message":"Hello test"}' || exit 1
        
        # Stop the API
        kill $APP_PID
        
        echo "âœ… All tests passed!"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'