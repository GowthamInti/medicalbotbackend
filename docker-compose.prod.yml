version: '3.8'

services:
  ollama:
    image: ollama/ollama:latest
    container_name: chatbot-ollama-prod
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    profiles:
      - ollama
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  ollama-init:
    image: curlimages/curl:latest
    container_name: chatbot-ollama-init
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_MODEL_NAME=${OLLAMA_MODEL_NAME:-llama3.2:1b}
    command: >
      sh -c "
        echo 'Initializing Ollama with model: $$OLLAMA_MODEL_NAME' &&
        echo 'Waiting for Ollama to stabilize...' &&
        sleep 15 &&
        echo 'Checking if model exists...' &&
        if ! curl -s http://ollama:11434/api/tags | grep -q \"$$OLLAMA_MODEL_NAME\"; then
          echo 'Pulling model $$OLLAMA_MODEL_NAME...' &&
          curl -X POST http://ollama:11434/api/pull \
            -H 'Content-Type: application/json' \
            -d '{\"name\":\"'$$OLLAMA_MODEL_NAME'\"}' &&
          echo 'Model pull initiated. Monitor ollama logs for progress.' &&
          sleep 30 &&
          echo 'Testing model...' &&
          curl -X POST http://ollama:11434/api/generate \
            -H 'Content-Type: application/json' \
            -d '{\"model\":\"'$$OLLAMA_MODEL_NAME'\",\"prompt\":\"test\",\"stream\":false}' &&
          echo 'Model initialization completed!'
        else
          echo 'Model $$OLLAMA_MODEL_NAME already exists.'
        fi
      "
    restart: "no"
    profiles:
      - ollama

  chatbot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-api-prod
    ports:
      - "8000:8000"
    environment:
      # LLM Provider Configuration
      - LLM_PROVIDER=${LLM_PROVIDER:-ollama}
      
      # Ollama Configuration
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL_NAME=${OLLAMA_MODEL_NAME:-llama3.2:1b}
      
      # ChatGroq Configuration
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - GROQ_BASE_URL=${GROQ_BASE_URL:-https://api.groq.com/openai/v1}
      - GROQ_MODEL_NAME=${GROQ_MODEL_NAME:-llama3-8b-8192}
      
      # LLM Configuration
      - TEMPERATURE=${TEMPERATURE:-0.7}
      - MAX_TOKENS=${MAX_TOKENS:-1024}
      
      # Memory Configuration
      - MEMORY_TTL_SECONDS=${MEMORY_TTL_SECONDS:-7200}
      - MAX_CACHE_SIZE=${MAX_CACHE_SIZE:-2000}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    depends_on:
      - ollama-init

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: chatbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - chatbot
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  ollama_data:
    driver: local